
name: 'Terraform Core Infra'

on:
  push:
    branches: [ "main" ]
    paths: 'terraform/core-infra/*'
    paths-ignore:
      - "**.tfstate"
      - "**.tfstate.encrypted"
  pull_request:
    paths: 'terraform/core-infra/*'
    paths-ignore:
      - "**.tfstate"
      - "**.tfstate.encrypted"

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform/core-infra

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
    #   with:
    #     cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    - name: Download Terraform State
      uses: badgerhobbs/terraform-state@v1
      with:
          operation: download
          location: repository
          github_token: ${{ github.TOKEN }}

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -out=tfplan -input=false

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: terraform/core-infra/tfplan

    - name: Require Approval
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.TOKEN }}
        approvers: laysauchoa
        minimum-approvals: 1
        issue-title: "Deploying v1.0.0 to prod"
        issue-body: "Review the terraform plan, then approve or deny the deployment of v1.0.0 to prod."
        exclude-workflow-initiator-as-approver: false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve -input=false tfplan -out=tfapply

    - name: Upload Terraform Apply
      uses: actions/upload-artifact@v4
      with:
        name: terraform-apply
        path: terraform/core-infra/tfapply

    - name: Upload Terraform State
      uses: badgerhobbs/terraform-state@v1
      if: always()
      with:
        operation: upload
        location: repository
        github_token: ${{ github.TOKEN }}




